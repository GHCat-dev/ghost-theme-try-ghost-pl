22c22
<   `(#|\\/\\/|\\{\\/\\*|\\/\\*+|${HIGHLIGHTED_HTML_COMMENT_START})`
---
>     `(#|\\/\\/|\\{\\/\\*|\\/\\*+|${HIGHLIGHTED_HTML_COMMENT_START})`
25,26c25,27
< const createDirectiveRegExp = featureSelector =>
<   new RegExp(`${featureSelector}-(next-line|line|start|end|range)({([^}]+)})?`)
---
> const createDirectiveRegExp = (featureSelector) => {
>     new RegExp(`${featureSelector}-(next-line|line|start|end|range)({([^}]+)})?`)
> }
33,34c34,35
<   highlight: /highlight-end/,
<   hide: /hide-end/,
---
>     highlight: /highlight-end/,
>     hide: /hide-end/,
39,51c40,57
< const stripComment = line =>
<   /**
<    * This regexp does the following:
<    * 1. Match a comment start, along with the accompanying PrismJS opening comment span tag;
<    * 2. Match one of the directives;
<    * 3. Match a comment end, along with the accompanying PrismJS closing span tag.
<    */
<   line.replace(
<     new RegExp(
<       `\\s*(${HIGHLIGHTED_JSX_COMMENT_START}|${PRISMJS_COMMENT_OPENING_SPAN_TAG}${COMMENT_START.source})\\s*${DIRECTIVE.source}\\s*(${HIGHLIGHTED_JSX_COMMENT_END}|${COMMENT_END.source}${PRISMJS_COMMENT_CLOSING_SPAN_TAG})`
<     ),
<     ``
<   )
---
> const stripComment = (line) => {
>     /**
>      * This regexp does the following:
>      * 1. Match a comment start, along with the accompanying PrismJS opening comment span tag;
>      * 2. Match one of the directives;
>      * 3. Match a comment end, along with the accompanying PrismJS closing span tag.
>     */
>     line.replace(
>         new RegExp(
>             `\\s*(${HIGHLIGHTED_JSX_COMMENT_START}|${PRISMJS_COMMENT_OPENING_SPAN_TAG}${COMMENT_START.source})\\s*${DIRECTIVE.source}\\s*(${HIGHLIGHTED_JSX_COMMENT_END}|${COMMENT_END.source}${PRISMJS_COMMENT_CLOSING_SPAN_TAG})`
>         ),
>         ``
>     )
> }
> 
> const highlightWrap = (line) => {
>     [`<span class="gatsby-highlight-code-line">`, line, `</span>`].join(``)
> }
53,54d58
< const highlightWrap = line =>
<   [`<span class="gatsby-highlight-code-line">`, line, `</span>`].join(``)
58,64c62,68
<   const [, feature, directive, directiveRange] = line.match(DIRECTIVE)
<   const flagSource = {
<     feature,
<     index,
<     directive: `${feature}-${directive}${directiveRange}`,
<   }
<   switch (directive) {
---
>     const [, feature, directive, directiveRange] = line.match(DIRECTIVE)
>     const flagSource = {
>         feature,
>         index,
>         directive: `${feature}-${directive}${directiveRange}`,
>     }
>     switch (directive) {
66,68c70,72
<       actions.flag(feature, index + 1, flagSource)
<       actions.hide(index)
<       break
---
>         actions.flag(feature, index + 1, flagSource)
>         actions.hide(index)
>         break
70,83c74,87
<       // find the next `${feature}-end` directive, starting from next line
<       const endIndex = code.findIndex(
<         (line, idx) => idx > index && END_DIRECTIVE[feature].test(line)
<       )
< 
<       const end = endIndex === -1 ? code.length : endIndex
< 
<       actions.hide(index)
<       actions.hide(end)
< 
<       for (let i = index + 1; i < end; i++) {
<         actions.flag(feature, i, flagSource)
<       }
<       break
---
>         // find the next `${feature}-end` directive, starting from next line
>         const endIndex = code.findIndex(
>             (line, idx) => idx > index && END_DIRECTIVE[feature].test(line)
>         )
> 
>         const end = endIndex === -1 ? code.length : endIndex
> 
>         actions.hide(index)
>         actions.hide(end)
> 
>         for (let i = index + 1; i < end; i++) {
>             actions.flag(feature, i, flagSource)
>         }
>         break
86,88c90,92
<       actions.flag(feature, index, flagSource)
<       actions.stripComment(index)
<       break
---
>         actions.flag(feature, index, flagSource)
>         actions.stripComment(index)
>         break
90c94
<       actions.hide(index)
---
>         actions.hide(index)
92,99c96,104
<       if (directiveRange) {
<         const strippedDirectiveRange = directiveRange.slice(1, -1)
<         const range = rangeParser.parse(strippedDirectiveRange)
<         if (range.length > 0) {
<           range.forEach(relativeIndex => {
<             actions.flag(feature, index + relativeIndex, flagSource)
<           })
<           break
---
>         if (directiveRange) {
>             const strippedDirectiveRange = directiveRange.slice(1, -1)
>             const range = rangeParser.parse(strippedDirectiveRange)
>             if (range.length > 0) {
>                 range.forEach((relativeIndex) => {
>                     actions.flag(feature, index + relativeIndex, flagSource)
>                 })
>                 break
>             }
101d105
<       }
103,105c107,109
<       console.warn(`Invalid match specified: "${line.trim()}"`)
<       break
<   }
---
>         console.warn(`Invalid match specified: "${line.trim()}"`)
>         break
>     }
109,115c113,124
<   if (highlights.length > 0 || HIGHLIGHT_DIRECTIVE.test(code)) {
<     // HACK split plain-text spans with line separators inside into multiple plain-text spans
<     // separated by line separator - this fixes line highlighting behaviour for jsx
<     code = code.replace(PLAIN_TEXT_WITH_LF_TEST, match =>
<       match.replace(/\n/g, `</span>\n<span class="token plain-text">`)
<     )
<   }
---
>     if (highlights.length > 0 || HIGHLIGHT_DIRECTIVE.test(code)) {
>         // HACK split plain-text spans with line separators inside into multiple plain-text spans
>         // separated by line separator - this fixes line highlighting behaviour for jsx
>         code = code.replace(PLAIN_TEXT_WITH_LF_TEST, match =>
>             match.replace(/\n/g, `</span>\n<span class="token plain-text">`)
>         )
>     }
> 
>     const split = code.split(`\n`)
>     const lines = split.map((code) => {
>         return { code, highlight: false, hide: false, flagSources: [] }
>     })
117,139c126,141
<   const split = code.split(`\n`)
<   const lines = split.map(code => {
<     return { code, highlight: false, hide: false, flagSources: [] }
<   })
< 
<   const actions = {
<     flag: (feature, line, flagSource) => {
<       if (line >= 0 && line < lines.length) {
<         const lineMeta = lines[line]
<         lineMeta[feature] = true
<         lineMeta.flagSources.push(flagSource)
<       }
<     },
<     hide: line => actions.flag(`hide`, line),
<     highlight: line => actions.flag(`highlight`, line),
<     stripComment: line => {
<       lines[line].code = stripComment(lines[line].code)
<     },
<   }
< 
<   const transform = lines =>
<     lines
<       .filter(({ hide, highlight, flagSources }, index) => {
---
>     const actions = {
>         flag: (feature, line, flagSource) => {
>             if (line >= 0 && line < lines.length) {
>                 const lineMeta = lines[line]
>                 lineMeta[feature] = true
>                 lineMeta.flagSources.push(flagSource)
>             }
>         },
>         hide: line => actions.flag(`hide`, line),
>         highlight: line => actions.flag(`highlight`, line),
>         stripComment: line => {
>             lines[line].code = stripComment(lines[line].code)
>         },
>     }
> 
>     const transform = lines => lines.filter(({ hide, highlight, flagSources }, index) => {
141,144c143,149
<           const formattedSources = flagSources
<             .map(
<               ({ feature, index, directive }) =>
<                 `  - Line ${index + 1}: ${feature} ("${directive}")`
---
>             const formattedSources = flagSources
>                 .map(({ feature, index, directive }) => {
>                     `  - Line ${index + 1}: ${feature} ("${directive}")`
>                 }).join(`\n`)
>             throw Error(
>                 `Line ${index +
>                 1} has been marked as both hidden and highlighted.\n${formattedSources}`
146,150d150
<             .join(`\n`)
<           throw Error(
<             `Line ${index +
<               1} has been marked as both hidden and highlighted.\n${formattedSources}`
<           )
154,155c154
<       })
<       .map(line => {
---
>     }).map((line) => {
157c156
<           line.code = highlightWrap(line.code)
---
>             line.code = highlightWrap(line.code)
160,167d158
<       })
< 
<   // If a highlight range is passed with the language declaration, e.g.
<   // ``jsx{1, 3-4}
<   // we only use that and do not try to parse highlight directives
<   if (highlights.length > 0) {
<     highlights.forEach(lineNumber => {
<       actions.highlight(lineNumber - 1)
169,170d159
<     return transform(lines)
<   }
172,175c161,168
<   for (let i = 0; i < split.length; i++) {
<     const line = split[i]
<     if (DIRECTIVE.test(line)) {
<       parseLine(line, split, i, actions)
---
>     // If a highlight range is passed with the language declaration, e.g.
>     // ``jsx{1, 3-4}
>     // we only use that and do not try to parse highlight directives
>     if (highlights.length > 0) {
>         highlights.forEach((lineNumber) => {
>             actions.highlight(lineNumber - 1)
>         })
>         return transform(lines)
177d169
<   }
179c171,178
<   return transform(lines)
---
>     for (let i = 0; i < split.length; i++) {
>         const line = split[i]
>         if (DIRECTIVE.test(line)) {
>             parseLine(line, split, i, actions)
>         }
>     }
> 
>     return transform(lines)
